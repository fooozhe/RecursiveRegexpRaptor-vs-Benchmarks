#+TITLE: Comparacion del Rendimiento de Morotes de Expresiones Regulares

lang ([[readme.org][en]])

Esta obra es un derivado del post hecho por *dark100*, incluye algunos cambios
al original y un punto de visto demasiado personal de creador de dos motores
desconocidos, por fabor consulta el original aqui ->
[[http://sljit.sourceforge.net/regex_perf.html][http://sljit.sourceforge.net/regex_perf.html]]

* Introduccion

  El procesamiento de texto en bruto byte a byte, es una de las tareas mas
  comunmente realizadas por la mayoría de las herramientas de software. Dentro
  de estas tareas se suelen incluir algoritmos de busqueda de patrones, y la
  herramienta más popular para tal fin son las expresiones regulares. Las
  expresiones regulares han evolucionado mucho desde que Kleene definio los
  conjuntos regulares en la década de 1950. Hoy en día tenemos varios motores de
  expresiones regulares ampliamente usados ​​que tienen distintas [[http://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines][caracteristicas]]
  que vuelven cualquier comparación de rendimiento una tarea difícil, ya que un
  motor veloz no es necesariamente *mejor*. Dependiendo del caso de uso podría
  ser suficiente conocer si es compatible con expresiones regulares POSIX para
  buscar una linea, incluso la posicion de la coincidencia es innecesaria
  (/utilidad grep/). En los demás casos cuando el uso requiere el soporte para
  la posición de captura, compatibilidad con unicode, bloque condicional y
  manipulación atómica (una secuencia de bytes como un único carácter, como
  'sch' en alemán). El primer caso necesita un algoritmo de menos sofisticado,
  que probablemente sea mucho más rápido que el segundo, pero de nuevo, eso no
  quiere decir que el primero es *mejor*. Puede encontrar más información sobre
  este tipo de motores [[http://sljit.sourceforge.net/regex_compare.html][aqui]].

* Participantes

  Los motores populores eligidos fueron:

  - [[http://www.pcre.org/][PCRE2 10.10]]
  - [[https://github.com/laurikari/tre/][tre 0.8.0]]
  - [[http://www.geocities.jp/kosako3/oniguruma/][Oniguruma 5.9.6]]
  - [[https://github.com/google/re2][re2 by Google]]
  - [[http://sljit.sourceforge.net/pcre.html][PCRE2 10.10 with sljit JIT compiler support]]


  y

  - [[https://github.com/nasciiboy/RecursiveRegexpRaptor][regexp3]]
  - [[https://github.com/nasciiboy/RecursiveRegexpRaptor-4][regexp4]]


  Antes de que nadie llegue a ninguna conclusion, debo señalar lo siguiente:

  - Los motores no estaban afinados (debido a mi falta de conocimiento sobre su
    funcionamiento interno, a excepcion de los mios regexp(3|4)). Solo los he
    compilado con las opciones predeterminadas. Si usted tiene una mejor
    configuracion por fabor enviemela y actualizare los resultados
    ([[mailto:nasciiboy@gmail]]).

  - Los motores estan compilados con la opcion =-O3= para un mejor rendimiento.

  - Esta comparacion tomo la prueba de *dark100* ([[mailto:hzmester@freemail.hu]]),
    inspirada en el trabajo de John Maddock (mira su comparacion [[http://www.boost.org/doc/libs/1_41_0/libs/regex/doc/gcc-performance.html][aqui]]). Los
    datos de entrada tambien son los mismos que el utilizo [[http://www.gutenberg.org/files/3200/old/mtent12.zip][mtent12.zip]]. Es un
    archivo de texto (e-book) con un tamaño alrededor de 20 Mbytes.

  - Solamente fueron seleccionados patrones comunes, no son casos patologicos ni
    tienen ninguna de las cualidades de Perl (regexp(3|4) solo cumplen casos
    regexp).

** Consideraciones Extra

   A diferencia de la comparacion original, /yo nasciiboy/ la realizo con la
   intencion de demostrar que miles de lineas de codigo, con funciones
   idescifrables llenas de guiones bajos, macros misticas y una estructura poco
   clara, pueden reemplazarse por codigo sensillo y claro.

   Las librerias regexp3 y regexp4 (en fase beta) parten de zero, detras de
   ellas solo existe la funcionalidad, en buena medida por que caresco de
   fundamentos matematicos y computacionales a exepcion de un par de libros de
   programacion en C y un manual de uso de awk.

   regexp3 es la solucion mas pura, sin embargo depende exclusivamente de la
   recursividad y resuelve la exprecion a cada caracter, por ello el tiempo
   optenido es drasticamente superior al de los demas motores.

   Por su parte regexp4 primero genera una tabla con instrucciones de como
   resolver la expresion y luego recorre el texto resolviendo la tabla
   con... recursividad.

   Ambas librerias solo resuelven expresiones regulares, *no hacen uso de
   ninguna libreria externa* incluidas las librerias estandar, ni tienen
   deteccion de errores. adicionalmente cumplen con las siguientes
   caracteristicas

   regexp3 esta formada por *510* lineas de codigo, regexp4 por *672*,
   incluyendo la declaracion de muchas funciones.

* Resultados
** x86-64 bit Intel Cerelon 847 1.1GHz (GCC 6.2.1, GNU/Linux)

   #+BEGIN_HTML
     <table class="results" border="1" width="100%">
     <tbody><tr><th>Regular expression</th><th>PCRE</th><th>PCRE<br>-DFA</th><th>TRE</th><th>Onig-<br>uruma</th><th>RE2</th><th>PCRE<br>-JIT</th><th class="raptor3">regexp3</th><th class="raptor4">regexp4</th></tr>
     <tr><td class="pattern"><table><tr><td>.|\n</td></tr><tr><td class="raptor3-pattern">.</td></tr></table></td><td class="time">4416 ms (20045118)</td><td class="time">4982 ms (20045118)</td><td class="time">6639 ms (20045118)</td><td class="time">2156 ms (20045118)</td><td class="time">7306 ms (20045118)</td><td class="time">1075 ms (20045118)</td><td class="time">1803 ms (20045118)</td><td class="time">753 ms (20045118)</td></tr>
     <tr><td class="pattern"><table><tr><td>\w</td></tr><tr><td class="raptor3-pattern">:w</td></tr></table></td><td class="time">2881 ms (14751878)</td><td class="time">2991 ms (14751878)</td><td class="time">4693 ms (14751878)</td><td class="time">2316 ms (14751878)</td><td class="time">5517 ms (14751878)</td><td class="time">945 ms (14751878)</td><td class="time">1885 ms (14750958)</td><td class="time">915 ms (14750958)</td></tr>
     <tr><td class="pattern"><table><tr><td>\d</td></tr><tr><td class="raptor3-pattern">:d</td></tr></table></td><td class="time">67 ms (27084)</td><td class="time">67 ms (27084)</td><td class="time">1034 ms (27084)</td><td class="time">134 ms (27084)</td><td class="time">233 ms (27084)</td><td class="time">57 ms (27084)</td><td class="time">1769 ms (27084)</td><td class="time">585 ms (27084)</td></tr>
     <tr><td class="pattern"><table><tr><td>\S</td></tr><tr><td class="raptor3-pattern">:S</td></tr></table></td><td class="time">3002 ms (15451664)</td><td class="time">3083 ms (15451664)</td><td class="time">4633 ms (15451664)</td><td class="time">1763 ms (15451664)</td><td class="time">5806 ms (15451664)</td><td class="time">887 ms (15451664)</td><td class="time">1908 ms (15451664)</td><td class="time">927 ms (15451664)</td></tr>
     <tr><td class="pattern"><table><tr><td>[.\s]+</td></tr><tr><td class="raptor3-pattern">[:.:s]+</td></tr></table></td><td class="time">931 ms (3430783)</td><td class="time">1060 ms (3430783)</td><td class="time">1882 ms (991813)</td><td class="time">773 ms (3430783)</td><td class="time">1773 ms (3430783)</td><td class="time">380 ms (3430783)</td><td class="time">4051 ms (3430783)</td><td class="time">1377 ms (3430783)</td></tr>
     <tr><td class="pattern"><table><tr><td>[\n.]+</td></tr><tr><td class="raptor3-pattern">[\n:.]+</td></tr></table></td><td class="time">187 ms (438367)</td><td class="time">232 ms (438367)</td><td class="time">1407 ms (438367)</td><td class="time">226 ms (438367)</td><td class="time">409 ms (438367)</td><td class="time">45 ms (438367)</td><td class="time">3726 ms (438367)</td><td class="time">1035 ms (438367)</td></tr>
     <tr><td class="pattern"><table><tr><td>e</td></tr><tr><td class="raptor3-pattern">e</td></tr></table></td><td class="time">360 ms (1781425)</td><td class="time">426 ms (1781425)</td><td class="time">496 ms (1781425)</td><td class="time">437 ms (1781425)</td><td class="time">722 ms (1781425)</td><td class="time">134 ms (1781425)</td><td class="time">1795 ms (1781425)</td><td class="time">650 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>(((((e)))))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;&lt;&lt;&lt;e&gt;&gt;&gt;&gt;&gt;</td></tr></table></td><td class="time">1226 ms (1781425)</td><td class="time">1098 ms (1781425)</td><td class="time">490 ms (1781425)</td><td class="time">844 ms (1781425)</td><td class="time">723 ms (1781425)</td><td class="time">202 ms (1781425)</td><td class="time">26092 ms (1781425)</td><td class="time">3548 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>((((((((((e))))))))))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;e&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</td></tr></table></td><td class="time">1907 ms (1781425)</td><td class="time">1741 ms (1781425)</td><td class="time">489 ms (1781425)</td><td class="time">1095 ms (1781425)</td><td class="time">726 ms (1781425)</td><td class="time">312 ms (1781425)</td><td class="time">82855 ms (1781425)</td><td class="time">5421 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>Twain</td></tr><tr><td class="raptor3-pattern">Twain</td></tr></table></td><td class="time">10 ms (2388)</td><td class="time">47 ms (2388)</td><td class="time">987 ms (2388)</td><td class="time">52 ms (2388)</td><td class="time">8 ms (2388)</td><td class="time">50 ms (2388)</td><td class="time">2550 ms (2388)</td><td class="time">554 ms (2388)</td></tr>
     <tr><td class="pattern"><table><tr><td>(Twain)</td></tr><tr><td class="raptor3-pattern">&lt;Twain&gt;</td></tr></table></td><td class="time">14 ms (2388)</td><td class="time">48 ms (2388)</td><td class="time">988 ms (2388)</td><td class="time">52 ms (2388)</td><td class="time">8 ms (2388)</td><td class="time">50 ms (2388)</td><td class="time">7145 ms (2388)</td><td class="time">940 ms (2388)</td></tr>
     <tr><td class="pattern"><table><tr><td>(?i)Twain</td></tr><tr><td class="raptor3-pattern">#*Twain</td></tr></table></td><td class="time">198 ms (2657)</td><td class="time">285 ms (2657)</td><td class="time">1253 ms (2657)</td><td class="time">412 ms (2657)</td><td class="time">255 ms (2657)</td><td class="time">52 ms (2657)</td><td class="time">2638 ms (2657)</td><td class="time">697 ms (2657)</td></tr>
     <tr><td class="pattern"><table><tr><td>((T|t)(w|W)(a|A)i([a-z]|1))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;T|t&gt;&lt;w|W&gt;&lt;a|A&gt;i&lt;[a-z]|1&gt;&gt;</td></tr></table></td><td class="time">673 ms (2427)</td><td class="time">531 ms (2427)</td><td class="time">1928 ms (2427)</td><td class="time">358 ms (2427)</td><td class="time">254 ms (2427)</td><td class="time">68 ms (2427)</td><td class="time">24419 ms (2427)</td><td class="time">2393 ms (2427)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-z]shing</td></tr><tr><td class="raptor3-pattern">[a-z]shing</td></tr></table></td><td class="time">1482 ms (1877)</td><td class="time">2309 ms (1877)</td><td class="time">1518 ms (1877)</td><td class="time">49 ms (1877)</td><td class="time">349 ms (1877)</td><td class="time">48 ms (1877)</td><td class="time">5341 ms (1877)</td><td class="time">1426 ms (1877)</td></tr>
     <tr><td class="pattern"><table><tr><td>Huck[a-zA-Z]+|Saw[a-zA-Z]+</td></tr><tr><td class="raptor3-pattern">Huck[a-zA-Z]+|Saw[a-zA-Z]+</td></tr></table></td><td class="time">72 ms (396)</td><td class="time">77 ms (396)</td><td class="time">1540 ms (396)</td><td class="time">138 ms (396)</td><td class="time">224 ms (396)</td><td class="time">9 ms (396)</td><td class="time">6161 ms (396)</td><td class="time">1416 ms (396)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-q][^u-z]{13}x</td></tr><tr><td class="raptor3-pattern">[a-q][^u-z]{13}x</td></tr></table></td><td class="time">1768 ms (4929)</td><td class="time">6307 ms (4929)</td><td class="time">4309 ms (4929)</td><td class="time">171 ms (4929)</td><td class="time">10119 ms (4929)</td><td class="time">5 ms (4929)</td><td class="time">11825 ms (4929)</td><td class="time">4299 ms (4929)</td></tr>
     <tr><td class="pattern"><table><tr><td>Tom|Sawyer|Huckleberry|Finn</td></tr><tr><td class="raptor3-pattern">Tom|Sawyer|Huckleberry|Finn</td></tr></table></td><td class="time">97 ms (3015)</td><td class="time">103 ms (3015)</td><td class="time">2764 ms (3015)</td><td class="time">157 ms (3015)</td><td class="time">226 ms (3015)</td><td class="time">84 ms (3015)</td><td class="time">11291 ms (3015)</td><td class="time">2545 ms (3015)</td></tr>
     <tr><td class="pattern"><table><tr><td>(Tom|Sawyer|Huckleberry|Finn)</td></tr><tr><td class="raptor3-pattern">&lt;Tom|Sawyer|Huckleberry|Finn&gt;</td></tr></table></td><td class="time">102 ms (3015)</td><td class="time">106 ms (3015)</td><td class="time">2754 ms (3015)</td><td class="time">158 ms (3015)</td><td class="time">227 ms (3015)</td><td class="time">82 ms (3015)</td><td class="time">26147 ms (3015)</td><td class="time">2928 ms (3015)</td></tr>
     <tr><td class="pattern"><table><tr><td>[hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo]</td></tr><tr><td class="raptor3-pattern">[hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo]</td></tr></table></td><td class="time">619 ms (534)</td><td class="time">887 ms (534)</td><td class="time">3201 ms (534)</td><td class="time">676 ms (534)</td><td class="time">320 ms (534)</td><td class="time">240 ms (534)</td><td class="time">10955 ms (534)</td><td class="time">1662 ms (534)</td></tr>
     <tr><td class="pattern"><table><tr><td>Tom.{10,25}river|river.{10,25}Tom</td></tr><tr><td class="raptor3-pattern">Tom([^(river|\n)]){10,25}river|river([^(Tom|\n)]){10,25}Tom</td></tr><tr><td class="raptor4-pattern">Tom(river|\n){10,25}#!river|river(Tom|\n){10,25}#!Tom</td></tr></table></td><td class="time">205 ms (2)</td><td class="time">257 ms (2)</td><td class="time">1749 ms (2)</td><td class="time">264 ms (2)</td><td class="time">244 ms (2)</td><td class="time">45 ms (2)</td><td class="time">13026 ms (2)</td><td class="time">1455 ms (2)</td></tr>
     <tr><td class="pattern"><table><tr><td>ing[^a-zA-Z]</td></tr><tr><td class="raptor3-pattern">ing[^a-zA-Z]</td></tr></table></td><td class="time">136 ms (85956)</td><td class="time">234 ms (85956)</td><td class="time">1110 ms (85956)</td><td class="time">91 ms (85956)</td><td class="time">100 ms (85956)</td><td class="time">54 ms (85956)</td><td class="time">2846 ms (85956)</td><td class="time">600 ms (85956)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-zA-Z]ing[^a-zA-Z]</td></tr><tr><td class="raptor3-pattern">[a-zA-Z]ing[^a-zA-Z]</td></tr></table></td><td class="time">1550 ms (85823)</td><td class="time">2371 ms (85823)</td><td class="time">1781 ms (85823)</td><td class="time">93 ms (85823)</td><td class="time">378 ms (85823)</td><td class="time">57 ms (85823)</td><td class="time">6105 ms (85823)</td><td class="time">1534 ms (85823)</td></tr>
     <tr><td class="pattern"><table><tr><td>([a-zA-Z]+ing)</td></tr><tr><td class="raptor3-pattern">&lt;([^(ing|:A)])+ing(([^(ing|:A)])*ing)*&gt;</td></tr><tr><td class="raptor4-pattern">&lt;(ing|:A)+#!ing(((ing|:A)*#!ing)*&gt;</td></tr></table></td><td class="time">4105 ms (95863)</td><td class="time">5539 ms (95863)</td><td class="time">2044 ms (95863)</td><td class="time">2395 ms (95863)</td><td class="time">390 ms (95863)</td><td class="time">229 ms (95863)</td><td class="time">53525 ms (95863)</td><td class="time">6746 ms (95863)</td></tr>
     <tr><td class="pattern"><table><tr><td>([A-Za-z]awyer|[A-Za-z]inn)\s</td></tr><tr><td class="raptor3-pattern">&lt;[A-Za-z]awyer|[A-Za-z]inn&gt;:s</td></tr></table></td><td class="time">3128 ms (313)</td><td class="time">3635 ms (313)</td><td class="time">2715 ms (313)</td><td class="time">550 ms (313)</td><td class="time">341 ms (313)</td><td class="time">105 ms (313)</td><td class="time">22344 ms (313)</td><td class="time">4088 ms (313)</td></tr>
     </tbody></table>
   #+END_HTML


   Para realizar la prueba solo descarga o clona este repositor, abre un
   terminal, ejecuta =make=. y luego =runtest=. (Puedes enviarme tu resultado,
   con informacion del equipo, tu mail y un nick).
