#+TITLE: Comparacion del Rendimiento de Morotes de Expresiones Regulares

lang ([[readme.org][en]])

Esta obra es un derivado del post hecho por *dark100*, incluye algunos cambios
al original y un punto de visto demasiado personal de creador de dos motores
desconocidos, por fabor consulta el original aqui ->
[[http://sljit.sourceforge.net/regex_perf.html][http://sljit.sourceforge.net/regex_perf.html]]

* Introduccion

  El procesamiento de texto en bruto byte a byte, es una de las tareas mas
  comunmente realizadas por la mayoría de las herramientas de software. Dentro
  de estas tareas se suelen incluir algoritmos de busqueda de patrones, y la
  herramienta más popular para tal fin son las expresiones regulares. Las
  expresiones regulares han evolucionado mucho desde que Kleene definio los
  conjuntos regulares en la década de 1950. Hoy en día tenemos varios motores de
  expresiones regulares ampliamente usados ​​que tienen distintas [[http://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines][caracteristicas]]
  que vuelven cualquier comparación de rendimiento una tarea difícil, ya que un
  motor veloz no es necesariamente *mejor*. Dependiendo del caso de uso podría
  ser suficiente conocer si es compatible con expresiones regulares POSIX para
  buscar una linea, incluso la posicion de la coincidencia es innecesaria
  (/utilidad grep/). En los demás casos cuando el uso requiere el soporte para
  la posición de captura, compatibilidad con unicode, bloque condicional y
  manipulación atómica (una secuencia de bytes como un único carácter, como
  'sch' en alemán). El primer caso necesita un algoritmo de menos sofisticado,
  que probablemente sea mucho más rápido que el segundo, pero de nuevo, eso no
  quiere decir que el primero es *mejor*. Puede encontrar más información sobre
  este tipo de motores [[http://sljit.sourceforge.net/regex_compare.html][aqui]].

* Participantes

  Los motores populores eligidos fueron:

  - [[http://www.pcre.org/][PCRE2 10.10]]
  - [[https://github.com/laurikari/tre/][tre 0.8.0]]
  - [[http://www.geocities.jp/kosako3/oniguruma/][Oniguruma 5.9.6]]
  - [[https://github.com/google/re2][re2 by Google]]
  - [[http://sljit.sourceforge.net/pcre.html][PCRE2 10.10 with sljit JIT compiler support]]


  y

  - [[https://github.com/nasciiboy/RecursiveRegexpRaptor][regexp3]]
  - [[https://github.com/nasciiboy/RecursiveRegexpRaptor-4][regexp4]]


  Antes de que nadie llegue a ninguna conclusion, debo señalar lo siguiente:

  - Los motores no estaban afinados (debido a mi falta de conocimiento sobre su
    funcionamiento interno, a excepcion de los mios regexp(3|4)). Solo los he
    compilado con las opciones predeterminadas. Si usted tiene una mejor
    configuracion por fabor enviemela y actualizare los resultados
    ([[mailto:nasciiboy@gmail]]).

  - Los motores estan compilados con la opcion =-O3= para un mejor rendimiento.

  - Esta comparacion tomo la prueba de *dark100* ([[mailto:hzmester@freemail.hu]]),
    inspirada en el trabajo de John Maddock (mira su comparacion [[http://www.boost.org/doc/libs/1_41_0/libs/regex/doc/gcc-performance.html][aqui]]). Los
    datos de entrada tambien son los mismos que el utilizo [[http://www.gutenberg.org/files/3200/old/mtent12.zip][mtent12.zip]]. Es un
    archivo de texto (e-book) con un tamaño alrededor de 20 Mbytes.

  - Solamente fueron seleccionados patrones comunes, no son casos patologicos ni
    tienen ninguna de las cualidades de Perl (regexp(3|4) solo cumplen casos
    regexp).

** Consideraciones Extra

   A diferencia de la comparacion original, /yo nasciiboy/ la realizo con la
   intencion de demostrar que miles de lineas de codigo, con funciones
   idescifrables llenas de guiones bajos, macros misticas y una estructura poco
   clara, pueden reemplazarse por codigo sensillo y claro.

   Las librerias regexp3 y regexp4 (en fase beta) parten de zero, detras de
   ellas solo existe la funcionalidad, en buena medida por que caresco de
   fundamentos matematicos y computacionales a exepcion de un par de libros de
   programacion en C y un manual de uso de awk.

   regexp3 es la solucion mas pura, sin embargo depende exclusivamente de la
   recursividad y resuelve la exprecion a cada caracter, por ello el tiempo
   optenido es drasticamente superior al de los demas motores.

   Por su parte regexp4 primero genera una tabla con instrucciones de como
   resolver la expresion y luego recorre el texto resolviendo la tabla
   con... recursividad.

   Ambas librerias solo resuelven expresiones regulares, *no hacen uso de
   ninguna libreria externa* incluidas las librerias estandar, ni tienen
   deteccion de errores. adicionalmente cumplen con las siguientes
   caracteristicas

   regexp3 esta formada por *517* lineas de codigo, regexp4 por *679*,
   incluyendo la declaracion de muchas funciones.

* Resultados
** x86-64 bit Intel Cerelon 847 1.1GHz (GCC 6.2.1, GNU/Linux)

   #+BEGIN_HTML
     <table class="results" border="1" width="100%">
     <tbody><tr><th>Regular expression</th><th>PCRE</th><th>PCRE<br>-DFA</th><th>TRE</th><th>Onig-<br>uruma</th><th>RE2</th><th>PCRE<br>-JIT</th><th class="raptor3">regexp3</th><th class="raptor4">regexp4</th></tr>
     <tr><td class="pattern"><table><tr><td>.|\n</td></tr><tr><td class="raptor3-pattern">.</td></tr></table></td><td class="time">4611 ms (20045118)</td><td class="time">4882 ms (20045118)</td><td class="time">6716 ms (20045118)</td><td class="time">2087 ms (20045118)</td><td class="time">7259 ms (20045118)</td><td class="time">1083 ms (20045118)</td><td class="time">1792 ms (20045118)</td><td class="time">804 ms (20045118)</td></tr>
     <tr><td class="pattern"><table><tr><td>\w</td></tr><tr><td class="raptor3-pattern">:w</td></tr></table></td><td class="time">2854 ms (14751878)</td><td class="time">2932 ms (14751878)</td><td class="time">4630 ms (14751878)</td><td class="time">2271 ms (14751878)</td><td class="time">5543 ms (14751878)</td><td class="time">946 ms (14751878)</td><td class="time">1873 ms (14750958)</td><td class="time">953 ms (14750958)</td></tr>
     <tr><td class="pattern"><table><tr><td>\d</td></tr><tr><td class="raptor3-pattern">:d</td></tr></table></td><td class="time">66 ms (27084)</td><td class="time">66 ms (27084)</td><td class="time">1038 ms (27084)</td><td class="time">133 ms (27084)</td><td class="time">230 ms (27084)</td><td class="time">57 ms (27084)</td><td class="time">1756 ms (27084)</td><td class="time">608 ms (27084)</td></tr>
     <tr><td class="pattern"><table><tr><td>\S</td></tr><tr><td class="raptor3-pattern">:S</td></tr></table></td><td class="time">2990 ms (15451664)</td><td class="time">3034 ms (15451664)</td><td class="time">4582 ms (15451664)</td><td class="time">1761 ms (15451664)</td><td class="time">5883 ms (15451664)</td><td class="time">894 ms (15451664)</td><td class="time">1878 ms (15451664)</td><td class="time">950 ms (15451664)</td></tr>
     <tr><td class="pattern"><table><tr><td>[.\s]+</td></tr><tr><td class="raptor3-pattern">[:.:s]+</td></tr></table></td><td class="time">923 ms (3430783)</td><td class="time">1054 ms (3430783)</td><td class="time">1921 ms (991813)</td><td class="time">765 ms (3430783)</td><td class="time">1721 ms (3430783)</td><td class="time">385 ms (3430783)</td><td class="time">4277 ms (3430783)</td><td class="time">1470 ms (3430783)</td></tr>
     <tr><td class="pattern"><table><tr><td>[\n.]+</td></tr><tr><td class="raptor3-pattern">[\n:.]+</td></tr></table></td><td class="time">186 ms (438367)</td><td class="time">228 ms (438367)</td><td class="time">1419 ms (438367)</td><td class="time">224 ms (438367)</td><td class="time">410 ms (438367)</td><td class="time">46 ms (438367)</td><td class="time">3845 ms (438367)</td><td class="time">1076 ms (438367)</td></tr>
     <tr><td class="pattern"><table><tr><td>e</td></tr><tr><td class="raptor3-pattern">e</td></tr></table></td><td class="time">360 ms (1781425)</td><td class="time">418 ms (1781425)</td><td class="time">504 ms (1781425)</td><td class="time">432 ms (1781425)</td><td class="time">732 ms (1781425)</td><td class="time">134 ms (1781425)</td><td class="time">1773 ms (1781425)</td><td class="time">678 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>(((((e)))))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;&lt;&lt;&lt;e&gt;&gt;&gt;&gt;&gt;</td></tr></table></td><td class="time">1211 ms (1781425)</td><td class="time">1092 ms (1781425)</td><td class="time">501 ms (1781425)</td><td class="time">839 ms (1781425)</td><td class="time">733 ms (1781425)</td><td class="time">201 ms (1781425)</td><td class="time">24500 ms (1781425)</td><td class="time">3543 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>((((((((((e))))))))))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;e&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</td></tr></table></td><td class="time">1909 ms (1781425)</td><td class="time">1696 ms (1781425)</td><td class="time">501 ms (1781425)</td><td class="time">1083 ms (1781425)</td><td class="time">738 ms (1781425)</td><td class="time">313 ms (1781425)</td><td class="time">78760 ms (1781425)</td><td class="time">5240 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>Twain</td></tr><tr><td class="raptor3-pattern">Twain</td></tr></table></td><td class="time">10 ms (2388)</td><td class="time">46 ms (2388)</td><td class="time">995 ms (2388)</td><td class="time">52 ms (2388)</td><td class="time">7 ms (2388)</td><td class="time">50 ms (2388)</td><td class="time">3786 ms (2388)</td><td class="time">588 ms (2388)</td></tr>
     <tr><td class="pattern"><table><tr><td>(Twain)</td></tr><tr><td class="raptor3-pattern">&lt;Twain&gt;</td></tr></table></td><td class="time">13 ms (2388)</td><td class="time">48 ms (2388)</td><td class="time">1005 ms (2388)</td><td class="time">52 ms (2388)</td><td class="time">7 ms (2388)</td><td class="time">50 ms (2388)</td><td class="time">8176 ms (2388)</td><td class="time">1008 ms (2388)</td></tr>
     <tr><td class="pattern"><table><tr><td>(?i)Twain</td></tr><tr><td class="raptor3-pattern">#*Twain</td></tr></table></td><td class="time">197 ms (2657)</td><td class="time">283 ms (2657)</td><td class="time">1273 ms (2657)</td><td class="time">336 ms (2657)</td><td class="time">253 ms (2657)</td><td class="time">52 ms (2657)</td><td class="time">3908 ms (2657)</td><td class="time">709 ms (2657)</td></tr>
     <tr><td class="pattern"><table><tr><td>((T|t)(w|W)(a|A)i([a-z]|1))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;T|t&gt;&lt;w|W&gt;&lt;a|A&gt;i&lt;[a-z]|1&gt;&gt;</td></tr></table></td><td class="time">651 ms (2427)</td><td class="time">524 ms (2427)</td><td class="time">1935 ms (2427)</td><td class="time">312 ms (2427)</td><td class="time">253 ms (2427)</td><td class="time">67 ms (2427)</td><td class="time">23270 ms (2427)</td><td class="time">2576 ms (2427)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-z]shing</td></tr><tr><td class="raptor3-pattern">[a-z]shing</td></tr></table></td><td class="time">2147 ms (1877)</td><td class="time">2237 ms (1877)</td><td class="time">1586 ms (1877)</td><td class="time">48 ms (1877)</td><td class="time">347 ms (1877)</td><td class="time">48 ms (1877)</td><td class="time">6442 ms (1877)</td><td class="time">1470 ms (1877)</td></tr>
     <tr><td class="pattern"><table><tr><td>Huck[a-zA-Z]+|Saw[a-zA-Z]+</td></tr><tr><td class="raptor3-pattern">Huck[a-zA-Z]+|Saw[a-zA-Z]+</td></tr></table></td><td class="time">71 ms (396)</td><td class="time">77 ms (396)</td><td class="time">1584 ms (396)</td><td class="time">137 ms (396)</td><td class="time">222 ms (396)</td><td class="time">9 ms (396)</td><td class="time">8049 ms (396)</td><td class="time">1539 ms (396)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-q][^u-z]{13}x</td></tr><tr><td class="raptor3-pattern">[a-q][^u-z]{13}x</td></tr></table></td><td class="time">1753 ms (4929)</td><td class="time">6192 ms (4929)</td><td class="time">4392 ms (4929)</td><td class="time">171 ms (4929)</td><td class="time">9292 ms (4929)</td><td class="time">5 ms (4929)</td><td class="time">14242 ms (4929)</td><td class="time">4166 ms (4929)</td></tr>
     <tr><td class="pattern"><table><tr><td>Tom|Sawyer|Huckleberry|Finn</td></tr><tr><td class="raptor3-pattern">Tom|Sawyer|Huckleberry|Finn</td></tr></table></td><td class="time">96 ms (3015)</td><td class="time">102 ms (3015)</td><td class="time">2835 ms (3015)</td><td class="time">156 ms (3015)</td><td class="time">225 ms (3015)</td><td class="time">84 ms (3015)</td><td class="time">18252 ms (3015)</td><td class="time">2746 ms (3015)</td></tr>
     <tr><td class="pattern"><table><tr><td>(Tom|Sawyer|Huckleberry|Finn)</td></tr><tr><td class="raptor3-pattern">&lt;Tom|Sawyer|Huckleberry|Finn&gt;</td></tr></table></td><td class="time">101 ms (3015)</td><td class="time">105 ms (3015)</td><td class="time">2845 ms (3015)</td><td class="time">157 ms (3015)</td><td class="time">225 ms (3015)</td><td class="time">82 ms (3015)</td><td class="time">32768 ms (3015)</td><td class="time">3167 ms (3015)</td></tr>
     <tr><td class="pattern"><table><tr><td>[hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo]</td></tr><tr><td class="raptor3-pattern">[hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo]</td></tr></table></td><td class="time">614 ms (534)</td><td class="time">875 ms (534)</td><td class="time">3291 ms (534)</td><td class="time">674 ms (534)</td><td class="time">320 ms (534)</td><td class="time">239 ms (534)</td><td class="time">15595 ms (534)</td><td class="time">1636 ms (534)</td></tr>
     <tr><td class="pattern"><table><tr><td>Tom.{10,25}river|river.{10,25}Tom</td></tr><tr><td class="raptor3-pattern">Tom([^(river|\n)]){10,25}river|river([^(Tom|\n)]){10,25}Tom</td></tr><tr><td class="raptor4-pattern">Tom(river|\n){10,25}#!river|river(Tom|\n){10,25}#!Tom</td></tr></table></td><td class="time">206 ms (2)</td><td class="time">255 ms (2)</td><td class="time">1796 ms (2)</td><td class="time">241 ms (2)</td><td class="time">242 ms (2)</td><td class="time">45 ms (2)</td><td class="time">13844 ms (2)</td><td class="time">1565 ms (2)</td></tr>
     <tr><td class="pattern"><table><tr><td>ing[^a-zA-Z]</td></tr><tr><td class="raptor3-pattern">ing[^a-zA-Z]</td></tr></table></td><td class="time">136 ms (85956)</td><td class="time">229 ms (85956)</td><td class="time">1109 ms (85956)</td><td class="time">90 ms (85956)</td><td class="time">100 ms (85956)</td><td class="time">54 ms (85956)</td><td class="time">3632 ms (85956)</td><td class="time">631 ms (85956)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-zA-Z]ing[^a-zA-Z]</td></tr><tr><td class="raptor3-pattern">[a-zA-Z]ing[^a-zA-Z]</td></tr></table></td><td class="time">2100 ms (85823)</td><td class="time">2310 ms (85823)</td><td class="time">1787 ms (85823)</td><td class="time">93 ms (85823)</td><td class="time">376 ms (85823)</td><td class="time">57 ms (85823)</td><td class="time">7340 ms (85823)</td><td class="time">1572 ms (85823)</td></tr>
     <tr><td class="pattern"><table><tr><td>([a-zA-Z]+ing)</td></tr><tr><td class="raptor3-pattern">&lt;([^(ing|:A)])+ing(([^(ing|:A)])*ing)*&gt;</td></tr><tr><td class="raptor4-pattern">&lt;(ing|:A)+#!ing(((ing|:A)*#!ing)*&gt;</td></tr></table></td><td class="time">3964 ms (95863)</td><td class="time">5444 ms (95863)</td><td class="time">2046 ms (95863)</td><td class="time">2373 ms (95863)</td><td class="time">387 ms (95863)</td><td class="time">228 ms (95863)</td><td class="time">55786 ms (95863)</td><td class="time">6983 ms (95863)</td></tr>
     <tr><td class="pattern"><table><tr><td>([A-Za-z]awyer|[A-Za-z]inn)\s</td></tr><tr><td class="raptor3-pattern">&lt;[A-Za-z]awyer|[A-Za-z]inn&gt;:s</td></tr></table></td><td class="time">3088 ms (313)</td><td class="time">3557 ms (313)</td><td class="time">2773 ms (313)</td><td class="time">520 ms (313)</td><td class="time">339 ms (313)</td><td class="time">104 ms (313)</td><td class="time">26452 ms (313)</td><td class="time">4195 ms (313)</td></tr>
     </tbody></table>
   #+END_HTML


   Para realizar la prueba solo descarga o clona este repositor, abre un
   terminal, ejecuta =make=. y luego =runtest=. (Puedes enviarme tu resultado,
   con informacion del equipo, tu mail y un nick).
