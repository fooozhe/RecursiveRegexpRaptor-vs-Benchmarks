#+TITLE: Performance comparison of regular expression engines

lang ([[readme-es.org][es]])

Read the original (no copy/paste) post by *dark100* at
[[http://sljit.sourceforge.net/regex_perf.html][http://sljit.sourceforge.net/regex_perf.html]]

* Introduction

  Processing text or raw byte-sequence are among the common tasks performed by
  most software tools.  These tasks usually involve pattern matching
  algorithms, and the most popular tool for such purpose is regular
  expressions. Regular expressions has been evolved a lot since Kleene defined
  the regular sets in the 1950's. Today we have several widely used regular
  expression engines which have different [[http://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines][features]] which makes any performance
  comparison a difficult task, since a *faster* engine is not necessary
  *better*. Depending on the use case it might be enough to know whether a
  POSIX compatible regular expression matches to a line, even the position of
  the match is unneeded (/grep utility/). On the contrary other use cases
  require the position of capturing brackets, unicode support, conditional and
  atomic block (handling a byte sequence as a single character, like 'sch' in
  German language) support just to name a few. The former case needs a less
  sophisticated algorithm, which is likely be much faster than the latter, but
  again, that does not mean the former is *better*. More about these engine
  types can be found [[http://sljit.sourceforge.net/regex_compare.html][here]].

* Participants

  The following popular engines were choosen:

  - [[http://www.pcre.org/][PCRE2 10.10]]
  - [[https://github.com/laurikari/tre/][tre 0.8.0]]
  - [[http://www.geocities.jp/kosako3/oniguruma/][Oniguruma 5.9.6]]
  - [[https://github.com/google/re2][re2 by Google]]
  - [[http://sljit.sourceforge.net/pcre.html][PCRE2 10.10 with sljit JIT compiler support]]


  and

  - [[https://github.com/nasciiboy/RecursiveRegexpRaptor][regexp3]]
  - [[https://github.com/nasciiboy/RecursiveRegexpRaptor-4][regexp4]]


  Before anyone jump to any conclusions, I should note the followings:

  - The engines were not fine tuned (because of my lack of knowledge about
    their internal workings).  I just compiled them with the default options. I
    know enabling or disabling some features can heavily affect the results. If
    you feel that you have a better configuration just drop me an e-mail and I
    will update the results ([[mailto:nasciiboy@gmail.com]]).

  - The regular expression engines are compiled with =-O3= to allow the best performance.

  - This comparison page was inspired by the work of John Maddock (See his own
    regex comparison [[http://www.boost.org/doc/libs/1_41_0/libs/regex/doc/gcc-performance.html][here]]).  The input is also the same he used before:
    [[http://www.gutenberg.org/files/3200/old/mtent12.zip][mtent12.zip]].  It is a text file (e-book) which size is about 20 Mbytes.

  - Only common patterns are selected, they are not pathological cases nor have
    any PERL specific features. The comparison was caseful.

* Results
** x86-64 bit Intel Cerelon 847 1.1GHz (GCC 6.2.1, Linux)

   #+BEGIN_HTML
     <table class="results" border="1" width="100%">
     <tbody><tr><th>Regular expression</th><th>PCRE</th><th>PCRE<br>-DFA</th><th>TRE</th><th>Onig-<br>uruma</th><th>RE2</th><th>PCRE<br>-JIT</th><th class="raptor3">regexp3</th><th class="raptor4">regexp4</th></tr>
     <tr><td class="pattern"><table><tr><td>.|\n</td></tr><tr><td class="raptor3-pattern">.</td></tr></table></td><td class="time">4611 ms (20045118)</td><td class="time">4882 ms (20045118)</td><td class="time">6716 ms (20045118)</td><td class="time">2087 ms (20045118)</td><td class="time">7259 ms (20045118)</td><td class="time">1083 ms (20045118)</td><td class="time">1792 ms (20045118)</td><td class="time">804 ms (20045118)</td></tr>
     <tr><td class="pattern"><table><tr><td>\w</td></tr><tr><td class="raptor3-pattern">:w</td></tr></table></td><td class="time">2854 ms (14751878)</td><td class="time">2932 ms (14751878)</td><td class="time">4630 ms (14751878)</td><td class="time">2271 ms (14751878)</td><td class="time">5543 ms (14751878)</td><td class="time">946 ms (14751878)</td><td class="time">1873 ms (14750958)</td><td class="time">953 ms (14750958)</td></tr>
     <tr><td class="pattern"><table><tr><td>\d</td></tr><tr><td class="raptor3-pattern">:d</td></tr></table></td><td class="time">66 ms (27084)</td><td class="time">66 ms (27084)</td><td class="time">1038 ms (27084)</td><td class="time">133 ms (27084)</td><td class="time">230 ms (27084)</td><td class="time">57 ms (27084)</td><td class="time">1756 ms (27084)</td><td class="time">608 ms (27084)</td></tr>
     <tr><td class="pattern"><table><tr><td>\S</td></tr><tr><td class="raptor3-pattern">:S</td></tr></table></td><td class="time">2990 ms (15451664)</td><td class="time">3034 ms (15451664)</td><td class="time">4582 ms (15451664)</td><td class="time">1761 ms (15451664)</td><td class="time">5883 ms (15451664)</td><td class="time">894 ms (15451664)</td><td class="time">1878 ms (15451664)</td><td class="time">950 ms (15451664)</td></tr>
     <tr><td class="pattern"><table><tr><td>[.\s]+</td></tr><tr><td class="raptor3-pattern">[:.:s]+</td></tr></table></td><td class="time">923 ms (3430783)</td><td class="time">1054 ms (3430783)</td><td class="time">1921 ms (991813)</td><td class="time">765 ms (3430783)</td><td class="time">1721 ms (3430783)</td><td class="time">385 ms (3430783)</td><td class="time">4277 ms (3430783)</td><td class="time">1470 ms (3430783)</td></tr>
     <tr><td class="pattern"><table><tr><td>[\n.]+</td></tr><tr><td class="raptor3-pattern">[\n:.]+</td></tr></table></td><td class="time">186 ms (438367)</td><td class="time">228 ms (438367)</td><td class="time">1419 ms (438367)</td><td class="time">224 ms (438367)</td><td class="time">410 ms (438367)</td><td class="time">46 ms (438367)</td><td class="time">3845 ms (438367)</td><td class="time">1076 ms (438367)</td></tr>
     <tr><td class="pattern"><table><tr><td>e</td></tr><tr><td class="raptor3-pattern">e</td></tr></table></td><td class="time">360 ms (1781425)</td><td class="time">418 ms (1781425)</td><td class="time">504 ms (1781425)</td><td class="time">432 ms (1781425)</td><td class="time">732 ms (1781425)</td><td class="time">134 ms (1781425)</td><td class="time">1773 ms (1781425)</td><td class="time">678 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>(((((e)))))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;&lt;&lt;&lt;e&gt;&gt;&gt;&gt;&gt;</td></tr></table></td><td class="time">1211 ms (1781425)</td><td class="time">1092 ms (1781425)</td><td class="time">501 ms (1781425)</td><td class="time">839 ms (1781425)</td><td class="time">733 ms (1781425)</td><td class="time">201 ms (1781425)</td><td class="time">24500 ms (1781425)</td><td class="time">3543 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>((((((((((e))))))))))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;e&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</td></tr></table></td><td class="time">1909 ms (1781425)</td><td class="time">1696 ms (1781425)</td><td class="time">501 ms (1781425)</td><td class="time">1083 ms (1781425)</td><td class="time">738 ms (1781425)</td><td class="time">313 ms (1781425)</td><td class="time">78760 ms (1781425)</td><td class="time">5240 ms (1781425)</td></tr>
     <tr><td class="pattern"><table><tr><td>Twain</td></tr><tr><td class="raptor3-pattern">Twain</td></tr></table></td><td class="time">10 ms (2388)</td><td class="time">46 ms (2388)</td><td class="time">995 ms (2388)</td><td class="time">52 ms (2388)</td><td class="time">7 ms (2388)</td><td class="time">50 ms (2388)</td><td class="time">3786 ms (2388)</td><td class="time">588 ms (2388)</td></tr>
     <tr><td class="pattern"><table><tr><td>(Twain)</td></tr><tr><td class="raptor3-pattern">&lt;Twain&gt;</td></tr></table></td><td class="time">13 ms (2388)</td><td class="time">48 ms (2388)</td><td class="time">1005 ms (2388)</td><td class="time">52 ms (2388)</td><td class="time">7 ms (2388)</td><td class="time">50 ms (2388)</td><td class="time">8176 ms (2388)</td><td class="time">1008 ms (2388)</td></tr>
     <tr><td class="pattern"><table><tr><td>(?i)Twain</td></tr><tr><td class="raptor3-pattern">#*Twain</td></tr></table></td><td class="time">197 ms (2657)</td><td class="time">283 ms (2657)</td><td class="time">1273 ms (2657)</td><td class="time">336 ms (2657)</td><td class="time">253 ms (2657)</td><td class="time">52 ms (2657)</td><td class="time">3908 ms (2657)</td><td class="time">709 ms (2657)</td></tr>
     <tr><td class="pattern"><table><tr><td>((T|t)(w|W)(a|A)i([a-z]|1))</td></tr><tr><td class="raptor3-pattern">&lt;&lt;T|t&gt;&lt;w|W&gt;&lt;a|A&gt;i&lt;[a-z]|1&gt;&gt;</td></tr></table></td><td class="time">651 ms (2427)</td><td class="time">524 ms (2427)</td><td class="time">1935 ms (2427)</td><td class="time">312 ms (2427)</td><td class="time">253 ms (2427)</td><td class="time">67 ms (2427)</td><td class="time">23270 ms (2427)</td><td class="time">2576 ms (2427)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-z]shing</td></tr><tr><td class="raptor3-pattern">[a-z]shing</td></tr></table></td><td class="time">2147 ms (1877)</td><td class="time">2237 ms (1877)</td><td class="time">1586 ms (1877)</td><td class="time">48 ms (1877)</td><td class="time">347 ms (1877)</td><td class="time">48 ms (1877)</td><td class="time">6442 ms (1877)</td><td class="time">1470 ms (1877)</td></tr>
     <tr><td class="pattern"><table><tr><td>Huck[a-zA-Z]+|Saw[a-zA-Z]+</td></tr><tr><td class="raptor3-pattern">Huck[a-zA-Z]+|Saw[a-zA-Z]+</td></tr></table></td><td class="time">71 ms (396)</td><td class="time">77 ms (396)</td><td class="time">1584 ms (396)</td><td class="time">137 ms (396)</td><td class="time">222 ms (396)</td><td class="time">9 ms (396)</td><td class="time">8049 ms (396)</td><td class="time">1539 ms (396)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-q][^u-z]{13}x</td></tr><tr><td class="raptor3-pattern">[a-q][^u-z]{13}x</td></tr></table></td><td class="time">1753 ms (4929)</td><td class="time">6192 ms (4929)</td><td class="time">4392 ms (4929)</td><td class="time">171 ms (4929)</td><td class="time">9292 ms (4929)</td><td class="time">5 ms (4929)</td><td class="time">14242 ms (4929)</td><td class="time">4166 ms (4929)</td></tr>
     <tr><td class="pattern"><table><tr><td>Tom|Sawyer|Huckleberry|Finn</td></tr><tr><td class="raptor3-pattern">Tom|Sawyer|Huckleberry|Finn</td></tr></table></td><td class="time">96 ms (3015)</td><td class="time">102 ms (3015)</td><td class="time">2835 ms (3015)</td><td class="time">156 ms (3015)</td><td class="time">225 ms (3015)</td><td class="time">84 ms (3015)</td><td class="time">18252 ms (3015)</td><td class="time">2746 ms (3015)</td></tr>
     <tr><td class="pattern"><table><tr><td>(Tom|Sawyer|Huckleberry|Finn)</td></tr><tr><td class="raptor3-pattern">&lt;Tom|Sawyer|Huckleberry|Finn&gt;</td></tr></table></td><td class="time">101 ms (3015)</td><td class="time">105 ms (3015)</td><td class="time">2845 ms (3015)</td><td class="time">157 ms (3015)</td><td class="time">225 ms (3015)</td><td class="time">82 ms (3015)</td><td class="time">32768 ms (3015)</td><td class="time">3167 ms (3015)</td></tr>
     <tr><td class="pattern"><table><tr><td>[hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo]</td></tr><tr><td class="raptor3-pattern">[hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo][hHeELlLlOo]</td></tr></table></td><td class="time">614 ms (534)</td><td class="time">875 ms (534)</td><td class="time">3291 ms (534)</td><td class="time">674 ms (534)</td><td class="time">320 ms (534)</td><td class="time">239 ms (534)</td><td class="time">15595 ms (534)</td><td class="time">1636 ms (534)</td></tr>
     <tr><td class="pattern"><table><tr><td>Tom.{10,25}river|river.{10,25}Tom</td></tr><tr><td class="raptor3-pattern">Tom([^(river|\n)]){10,25}river|river([^(Tom|\n)]){10,25}Tom</td></tr><tr><td class="raptor4-pattern">Tom(river|\n){10,25}#!river|river(Tom|\n){10,25}#!Tom</td></tr></table></td><td class="time">206 ms (2)</td><td class="time">255 ms (2)</td><td class="time">1796 ms (2)</td><td class="time">241 ms (2)</td><td class="time">242 ms (2)</td><td class="time">45 ms (2)</td><td class="time">13844 ms (2)</td><td class="time">1565 ms (2)</td></tr>
     <tr><td class="pattern"><table><tr><td>ing[^a-zA-Z]</td></tr><tr><td class="raptor3-pattern">ing[^a-zA-Z]</td></tr></table></td><td class="time">136 ms (85956)</td><td class="time">229 ms (85956)</td><td class="time">1109 ms (85956)</td><td class="time">90 ms (85956)</td><td class="time">100 ms (85956)</td><td class="time">54 ms (85956)</td><td class="time">3632 ms (85956)</td><td class="time">631 ms (85956)</td></tr>
     <tr><td class="pattern"><table><tr><td>[a-zA-Z]ing[^a-zA-Z]</td></tr><tr><td class="raptor3-pattern">[a-zA-Z]ing[^a-zA-Z]</td></tr></table></td><td class="time">2100 ms (85823)</td><td class="time">2310 ms (85823)</td><td class="time">1787 ms (85823)</td><td class="time">93 ms (85823)</td><td class="time">376 ms (85823)</td><td class="time">57 ms (85823)</td><td class="time">7340 ms (85823)</td><td class="time">1572 ms (85823)</td></tr>
     <tr><td class="pattern"><table><tr><td>([a-zA-Z]+ing)</td></tr><tr><td class="raptor3-pattern">&lt;([^(ing|:A)])+ing(([^(ing|:A)])*ing)*&gt;</td></tr><tr><td class="raptor4-pattern">&lt;(ing|:A)+#!ing(((ing|:A)*#!ing)*&gt;</td></tr></table></td><td class="time">3964 ms (95863)</td><td class="time">5444 ms (95863)</td><td class="time">2046 ms (95863)</td><td class="time">2373 ms (95863)</td><td class="time">387 ms (95863)</td><td class="time">228 ms (95863)</td><td class="time">55786 ms (95863)</td><td class="time">6983 ms (95863)</td></tr>
     <tr><td class="pattern"><table><tr><td>([A-Za-z]awyer|[A-Za-z]inn)\s</td></tr><tr><td class="raptor3-pattern">&lt;[A-Za-z]awyer|[A-Za-z]inn&gt;:s</td></tr></table></td><td class="time">3088 ms (313)</td><td class="time">3557 ms (313)</td><td class="time">2773 ms (313)</td><td class="time">520 ms (313)</td><td class="time">339 ms (313)</td><td class="time">104 ms (313)</td><td class="time">26452 ms (313)</td><td class="time">4195 ms (313)</td></tr>
     </tbody></table>
   #+END_HTML


   Just Donwload, type =make=. and run =runtest=.
